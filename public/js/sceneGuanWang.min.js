import * as THREE from '../../build/three.module.js';
import { OrbitControls } from '../../examples/jsm/controls/OrbitControls.js';
import { GLTFLoader } from '../../examples/jsm/loaders/GLTFLoader.js';
import { DRACOLoader } from '../../examples/jsm/loaders/DRACOLoader.js';
import { TWEEN } from '../../examples/jsm/libs/tween.module.min.js';
var renderer, scene, camera, camera2, controls;
let markerArray = [];
init();
animate();
function init() {
  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setClearColor(9605778, 0);
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.toneMapping = THREE.LinearToneMapping;
  renderer.toneMappingExposure = 1;
  document.body.appendChild(renderer.domElement);
  window.renderer = renderer;
  scene = new THREE.Scene();
  scene.background = new THREE.Color('#929292');
  camera = new THREE.PerspectiveCamera(
    40,
    window.innerWidth / window.innerHeight,
    0.01,
    1e4,
  );
  camera.position.set(
    0.48122437258444567,
    0.043434316074060356,
    0.18947681158011198,
  );
  controls = new OrbitControls(camera, renderer.domElement);
  controls.maxDistance = 0.8;
  controls.enableDamping = false;
  initLight();
  loadModel();
}
function animate() {
  requestAnimationFrame(animate);
  TWEEN.update();
  for (let e of markerArray) {
    if (e) {
      e.updatePosition();
    }
  }
  renderer.render(scene, camera);
}
function initLight() {
  const e = new THREE.AmbientLight(15790335, 0.3);
  scene.add(e);
  const t = new THREE.HemisphereLight(11184810, 526368, 1.2);
  scene.add(t);
  const n = new THREE.DirectionalLight(16777215, 0.9);
  n.position.set(0, 10, 0);
  n.target.position.set(0, 10, -10);
  n.target.updateMatrixWorld();
  scene.add(n);
  scene.add(n.target);
}
function loadModel() {
  var e = new DRACOLoader();
  e.setDecoderPath('js/libs/draco/gltf/');
  let t = new GLTFLoader();
  t.setDRACOLoader(e);
  t.load('models/changjing/chang-jing0824-processed.glb', (e) => {
    const t = e.scene;
    t.traverse((e) => {
      console.log('node:', e);
      if (e.isMesh) {
        console.log('node.material:', e.material);
        if (e.material.metalness === 1) {
          e.material.metalness = 0;
        }
      }
    });
    scene.add(t);
    loadIcon();
    loadImage();
    loadFont();
    cameraTweenStep1();
  });
}
function loadIcon() {
  const e = new THREE.PlaneGeometry(0.025, 0.025, 1);
  var t = THREE.ImageUtils.loadTexture('textures/guangwangscene/logo.png');
  const n = new THREE.MeshStandardMaterial({
    map: t,
    emissive: '#777777',
    side: THREE.SingleSide,
    roughness: 0.3,
    metalness: 0.7,
    transparent: true,
  });
  const a = new THREE.Mesh(e, n);
  a.position.set(64e-6, 0.064019, -0.060916 + 0.001);
  scene.add(a);
}
function loadImage() {
  const e = new THREE.PlaneGeometry(0.081545, 0.058959, 1);
  var t = THREE.ImageUtils.loadTexture('textures/guangwangscene/nft.png');
  const n = new THREE.MeshBasicMaterial({
    map: t,
    side: THREE.SingleSide,
    transparent: true,
  });
  const a = new THREE.Mesh(e, n);
  a.position.set(0.26252, 0.088413, -0.060916);
  scene.add(a);
}
function loadFont() {
  const e = new THREE.PlaneGeometry(0.053919, 0.038985, 1);
  var t = THREE.ImageUtils.loadTexture('textures/guangwangscene/font.png');
  const n = new THREE.MeshStandardMaterial({
    map: t,
    emissive: '#888888',
    side: THREE.SingleSide,
    transparent: true,
  });
  const a = new THREE.Mesh(e, n);
  a.position.set(0.320761, 0.021418, -0.060916 + 0.001);
  scene.add(a);
}
function cameraTweenStep1() {
  let e = new THREE.Vector3(
    0.48122437258444567,
    0.043434316074060356,
    0.18947681158011198,
  );
  let t = new THREE.Vector3(
    0.18469462596627123,
    0.0316023325122764,
    -0.16204290583978787,
  );
  let n = new THREE.Vector3(
    0.16425863635011648,
    0.043434316074060356,
    0.17886246315390436,
  );
  let a = new THREE.Vector3(
    0.004025796472940388,
    0.0316023325122764,
    -0.011084762166257874,
  );
  let r = 5e3;
  controls.enabled = false;
  let o = new TWEEN.Tween(e).to(n, r);
  o.onUpdate((e) => {
    camera.position.set(e.x, e.y, e.z);
  });
  o.start();
  let i = new TWEEN.Tween(t).to(a, r);
  i.onUpdate((e) => {
    camera.lookAt(e.x, e.y, e.z);
  });
  i.start();
  i.onComplete(() => {
    controls.enabled = true;
    controls.target.copy(a);
    drawMarker();
  });
}
function cameraTweenStep2() {
  let e = new THREE.Vector3(
    0.22004383442999992,
    0.048827093890821155,
    0.26494592437374853,
  );
  let t = new THREE.Vector3(
    0.25158856218714715,
    0.04780929608061142,
    0.08480926629459387,
  );
  let n = new THREE.Vector3(
    0.24872209531881373,
    0.05727828536851249,
    0.08716683456668696,
  );
  let a = new THREE.Vector3(
    0.2492170196581572,
    0.05726231652222282,
    0.08434056143547666,
  );
  let r = 2e4;
  controls.enabled = false;
  let o = new TWEEN.Tween(e).to(n, r);
  o.onUpdate((e) => {
    camera.position.set(e.x, e.y, e.z);
  });
  o.start();
  let i = new TWEEN.Tween(t).to(a, r);
  i.onUpdate((e) => {
    camera.lookAt(e.x, e.y, e.z);
  });
  i.start();
  i.onComplete(() => {
    controls.enabled = true;
    controls.target.copy(a);
    cameraTweenStep1();
  });
}
export function cameraAnimation(e, t, n, a, r, o, i) {
  if (!i) i = 1e3;
  let s = new TWEEN.Tween(e).to(n, i);
  s.easing(TWEEN.Easing.Sinusoidal.InOut);
  s.onUpdate((e) => {
    r.position.set(e.x, e.y, e.z);
  });
  s.start();
  let l = new TWEEN.Tween(t).to(a, i);
  l.easing(TWEEN.Easing.Sinusoidal.InOut);
  l.onUpdate((e) => {
    r.lookAt(e.x, e.y, e.z);
  });
  l.start();
  l.onComplete(() => {
    o.target.set(a.x, a.y, a.z);
    o.enabled = true;
  });
}
function getCamera() {
  console.log('camera:', camera);
  console.log('target:', controls.target);
}
function drawMarker() {
  let e = new CMarker(document.body, camera);
  e.fromPoint(new THREE.Vector3(-0.033265, 0.035338, -0.013563), '1', 1001);
  e.label.addEventListener('myTriger', (e) => {
    const t = new THREE.Vector3(
      -0.0734428875864879,
      0.08353550728895577,
      0.10697424733466523,
    );
    const n = new THREE.Vector3(
      -0.02566114853962263,
      0.05161324715416008,
      -0.030452766870077135,
    );
    cameraAnimation(camera.position, controls.target, t, n, camera, controls);
  });
  markerArray.push(e);
  let t = new CMarker(document.body, camera);
  t.fromPoint(new THREE.Vector3(0.297008, 0.035338, -0.013563), '2', 1002);
  t.label.addEventListener('myTriger', (e) => {
    const t = new THREE.Vector3(
      0.33375986001375196,
      0.06975094484698344,
      0.16153170589609608,
    );
    const n = new THREE.Vector3(
      0.3009659461391709,
      0.0615425319310013,
      0.02411944114332844,
    );
    cameraAnimation(camera.position, controls.target, t, n, camera, controls);
  });
  markerArray.push(t);
  let n = new CMarker(document.body, camera);
  n.fromPoint(new THREE.Vector3(-0.29359, 0.035338, 0.100252), '3', 1003);
  n.label.addEventListener('myTriger', (e) => {
    const t = new THREE.Vector3(
      -0.4235489125097759,
      0.0592868821619406,
      0.2539991116125734,
    );
    const n = new THREE.Vector3(
      0.12762691041361598,
      -0.06380286157218207,
      -0.31261727291243147,
    );
    cameraAnimation(camera.position, controls.target, t, n, camera, controls);
  });
  markerArray.push(n);
}
class CMarker {
  constructor(e, t, n, a) {
    this.container = e;
    this.camera = t;
    this.offsetLeft = n ? n : 0;
    this.offsetTop = a ? a : 0;
  }
  fromPoint(e, t, n) {
    if (!e) {
      return;
    }
    this.id = n;
    this.name = t;
    this.pos = e;
    var a = (this.container.clientWidth - this.offsetLeft) / 2;
    var r = (this.container.clientHeight - this.offsetTop) / 2;
    const o = e.clone().project(this.camera);
    var i = o.x * a + a;
    var s = -o.y * r + r;
    this.label = document.createElement('div');
    this.label.width = '42px';
    this.label.height = '42px';
    this.label.innerHTML = `<div>
            <div id="${this.id}" class="c-marker">
                ${this.name}
            </div>
        </div>`;
    this.label.style.position = 'absolute';
    this.label.style.left = `${i}px`;
    this.label.style.top = `${s}px`;
    this.label.style.zIndex = 2e3;
    this.container.appendChild(this.label);
    const l = document.createEvent('MouseEvents');
    l.initEvent('myTriger', true, false);
    this.label.addEventListener('click', (e) => {
      this.label.dispatchEvent(l);
    });
  }
  updatePosition() {
    var e = (this.container.clientWidth - this.offsetLeft) / 2;
    var t = (this.container.clientHeight - this.offsetTop) / 2;
    let n = this.pos.clone().project(this.camera);
    var a = n.x * e + e;
    var r = -n.y * t + t;
    this.label.style.left = a + 'px';
    this.label.style.top = r + 'px';
  }
}
window.getCamera = getCamera;
window.cameraTweenStep1 = cameraTweenStep1;
window.cameraTweenStep2 = cameraTweenStep2;
window.drawMarker = drawMarker;
